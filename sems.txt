
Domains
=============================================================

Program Value 
	PV : all values usable by the conventional programming 
	
Program Function
	F: [PV] -> PV
	A function over normal program values
	
	
Neant
	NA: null equivalent for signals

Value
	V = V || NA
	
Time
	T : [t0, t1, ...., tn]

Signal
	S: T -> V
	a value that varies over time

Continuous Signal (Property)
	P: T -> PV
	a signal function defined for all values of T, always produces a non NA value
	

Operators
==========

there are 2 types of operations:

1- Those who can act on the program clock -> can be viewed as operations on sets (note that this implies a push based approach on the semantic model)
2- Those who act on the signal values -> can be viewed as functions

1- Stream operators
---------------------

or: [E] -> E
or( E0, E1, ..., En ) = E0 | E1 | ... | En

and: [E] -> E
and( E0, E1, ..., En ) = E0 && E1 && ... && En

filter: F -> [E] -> E
filter (f, E1, ..., En) = [ e where e â‚¬ or(E1,...,En) && f(e) = true ]

2- Signal functions
--------------------

map: F -> [S] -> S
map f, [s], t = f( all( [s(t)] != NA ) )
				otherwise NA
	
filter
	filter: F -> S -> S
	filter f s t = map { f( s(t) ) ? s(t) : NA }  s t
	
reduce
	reduce: PV -> F -> S -> S
	reduce pv f s t =	if s(t) == NA -> pv
						else f( pv, s(t) )
	
def
	def: V -> [( S, F )] -> S
	def v [(s,f)] t =	fst( [f(s(t))] != NA )
						otherwise v

	

	
